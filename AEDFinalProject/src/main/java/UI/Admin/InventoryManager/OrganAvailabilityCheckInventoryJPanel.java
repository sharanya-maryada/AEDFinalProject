/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.Admin.InventoryManager;

import Backend.Connection.Connection;
import Backend.DB4OUtil.DB4OUtil;
import Backend.EcoSystem;
import Backend.Email;
import Backend.Enterprise.Enterprise;
import static Backend.Enterprise.Enterprise.EnterpriseType.LegalDepartment;
import Backend.Network.Network;
import Backend.Organization.AdvocateOrganization;
import Backend.Organization.InventoryManagerOrganization;
import Backend.Organization.Organization;
import Backend.SendMessageTwilio;
import Backend.UserAccount.UserAccount;
import Backend.WorkQueue.WorkRequest;
import UI.Receiver.ManageRequestReceiverJPanel;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ms
 */
public class OrganAvailabilityCheckInventoryJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageUsersJPanel
     */
    private EcoSystem system;
    private Enterprise enterprise ;
    private DB4OUtil dB4OUtil;
    private UserAccount userAccount;
    private InventoryManagerOrganization inventoryManager;
    private Connection connectionEmail;
    
    public OrganAvailabilityCheckInventoryJPanel(UserAccount account, 
            Organization organization, EcoSystem system,DB4OUtil dB4OUtil,Enterprise enterprise) {
        initComponents();
        this.enterprise = enterprise ;
        this.dB4OUtil = dB4OUtil;
        this.system = system;
        this.userAccount =userAccount;
        this.inventoryManager = (InventoryManagerOrganization) organization;
        populateTable();
        populateStatusTable();
    }
    
    private void populateTable() {
            DefaultTableModel donorModel = (DefaultTableModel)donorJtable.getModel();
            DefaultTableModel receiverModel = (DefaultTableModel)receiverJtable.getModel();
        
            donorModel.setRowCount(0);
            receiverModel.setRowCount(0);
        
        
        for (WorkRequest request : inventoryManager.getWorkQueue().getWorkRequestList()) {

            if (request.getInventoryStatus().equals("in inventory")) {

                Object[] row = new Object[5];
                row[0] = request.getUser();
                row[2] = request;

                if (request.getUser().getType() == 'd') {
                    row[1] = request.getDonorOrgan();
                    donorModel.addRow(row);
                } else {
                    row[1] = request.getReceiverOrgan();
                    receiverModel.addRow(row);
                }
            }
        }
      }
     public void populateStatusTable(){
          DefaultTableModel model = (DefaultTableModel)StatusJTable.getModel();
        
          model.setRowCount(0);
        
        for(Connection connection : inventoryManager.getConnectionDirectory().getConnectionList()){

            Object[] row = new Object[5];
            row[0] = connection.getDonorRequest().getUser().getName();
            row[1] = connection;
            row[2] = connection.getReceiverRequest().getUser().getName();
            row[3] = connection.getInventoryStatus();
             
                model.addRow(row);
            
            
      }
        
        }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        donorJtable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        receiverJtable = new javax.swing.JTable();
        processRequestButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        StatusJTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        donorJtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Organ", "Date"
            }
        ));
        jScrollPane1.setViewportView(donorJtable);

        receiverJtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Organ", "Date"
            }
        ));
        jScrollPane2.setViewportView(receiverJtable);

        processRequestButton.setBackground(new java.awt.Color(171, 204, 67));
        processRequestButton.setText("Process Request");
        processRequestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processRequestButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Receiver");

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Manage Requests");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Donor");

        StatusJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Donor Name", "Organ", "Receiver Name", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(StatusJTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 866, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(326, 326, 326)
                                .addComponent(processRequestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 64, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(processRequestButton)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void processRequestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processRequestButtonActionPerformed
        // TODO add your handling code here:
           int donorRow = donorJtable.getSelectedRow();
        int receiverRow = receiverJtable.getSelectedRow();
        
       
        if (donorJtable.getSelectedRowCount() != 1){
            JOptionPane.showMessageDialog(null, "Please select only one donor organ");
            return;
        }
        if (receiverJtable.getSelectedRowCount() != 1){
            JOptionPane.showMessageDialog(null, "Please select only one Receiver organ");
            return;
        }
        Enterprise legalent = null;
        for (Network network : system.getNetworkList()) {
            for (Enterprise allenterprise : network.getEnterpriseDirectory().getEnterpriseList()) {

                if (allenterprise.getEnterpriseType().equals(LegalDepartment)) {
                    legalent = allenterprise;
                    break;
                }
            }

        }

        Organization org = null;
        for (Organization organization : legalent.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof AdvocateOrganization) {
                org = organization;
                break;
            }
        }
        if (org == null) {
           JOptionPane.showMessageDialog(null, "Legal organization not present", "Error", JOptionPane.ERROR_MESSAGE);
           return;
        }
        
        String donatedOrgan = donorJtable.getValueAt(donorRow, 1).toString() ;
        String receivedOrgan = receiverJtable.getValueAt(receiverRow, 1).toString();
        
        if (donatedOrgan.equals(receivedOrgan)){
            
        WorkRequest donorRequest = (WorkRequest)donorJtable.getValueAt(donorRow, 2);
        WorkRequest receiverRequest = (WorkRequest)receiverJtable.getValueAt(receiverRow, 2);
        
        donorRequest.setOverallStatus("Potential match Found, Waiting for Advocate Approval");
        donorRequest.setInventoryStatus("Done");
        receiverRequest.setOverallStatus("Potential match Found, Waiting for Advocate Approval");
        receiverRequest.setInventoryStatus("Done");
        
        Connection connection = new Connection();
        connection.setDonorRequest(donorRequest);
        connection.setReceiverRequest(receiverRequest);
    //    connection.setDoctorStatus("Requested to Doctor");
         connection.setAdvocateStatus("Requested to Advocate");
        connection.setOrgan((receiverJtable.getValueAt(receiverRow, 1).toString()));
        connection.setInventoryStatus("In progress");
        
        inventoryManager.getConnectionDirectory().getConnectionList().add(connection);
        
        
       
        
        
            if (org != null) {
            connection.setAdvocateStatus("Requested to Advocate");
            
            connection.getReceiverRequest().setOverallStatus("Sent to Advocate, Will be taken care by Advocate");
            connection.getDonorRequest().setOverallStatus("Sent to Advocate, Will be taken care by Advocate");
            connection.setInventoryStatus("Done");
            org.getConnectionDirectory().getConnectionList().add(connection);
            emailDonor(connection);
            emailReceiver(connection);
            JOptionPane.showMessageDialog(null, "Request Sent Successfully");
            populateStatusTable();
            populateTable();
            } else {
            
                JOptionPane.showMessageDialog(null, "Legal organization not present", "Error", JOptionPane.ERROR_MESSAGE);
            
            }
       
        } 
        
        else {
        
        JOptionPane.showMessageDialog(null, "Organ does not match ", "Error", JOptionPane.ERROR_MESSAGE);
        return ;
        }
        
    }//GEN-LAST:event_processRequestButtonActionPerformed
        public void emailDonor(Connection connection){
          String emailTo = connection.getDonorRequest().getUser().getEmailId();
                String subject = "Request Status";
                String body = connection.getDonorRequest().getUser().getName() + "\nYou have found a potential receiver for the organ you offered to donate"
                        +"\nReceiver's information is:"+"\nName: "+connection.getReceiverRequest().getUser().getName()+
                        "\nGender: "+connection.getReceiverRequest().getUser().getGender()+
                          "\nAddress:  "+connection.getReceiverRequest().getUser().getAddress()+
                                    "\nCity: "+connection.getReceiverRequest().getUser().getCity(); 
               
                Email email = system.getEmail();
                SendMessageTwilio twilio=system.getTwilio();
          try {
              email.sendMail(emailTo, subject, body);
              JOptionPane.showMessageDialog(null, "Email and text message to Donor successfully");
              twilio.sendMessage(connection.getDonorRequest().getUser().getContactNumber(), body);
              
              
          } catch (Exception ex) {
              Logger.getLogger(ManageRequestReceiverJPanel.class.getName()).log(Level.SEVERE, null, ex);
          }
        }
        
        public void emailReceiver(Connection connection){
         String emailTo = connection.getReceiverRequest().getUser().getEmailId();
                String subject = "Request Status";
                String body = connection.getReceiverRequest().getUser().getName() + "\nYou have found a potential donor for the organ you requested"
                        +"\nDonor's information is:"+"\nName: "+connection.getDonorRequest().getUser().getName()+
                        "\nGender: "+connection.getDonorRequest().getUser().getGender()+
                          "\nAddress: "+connection.getDonorRequest().getUser().getAddress()+
                                    "\nCity: "+connection.getDonorRequest().getUser().getCity(); 
             
              Email email = system.getEmail();
                SendMessageTwilio twilio=system.getTwilio();
          try {
              email.sendMail(emailTo, subject, body);
              JOptionPane.showMessageDialog(null, "Email and text message to reciever successfully");
              twilio.sendMessage(connection.getReceiverRequest().getUser().getContactNumber(), body);
          } catch (Exception ex) {
              Logger.getLogger(ManageRequestReceiverJPanel.class.getName()).log(Level.SEVERE, null, ex);
          }
        }    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable StatusJTable;
    private javax.swing.JTable donorJtable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton processRequestButton;
    private javax.swing.JTable receiverJtable;
    // End of variables declaration//GEN-END:variables

   
}
